{"version":3,"sources":["PathFindingVisualizer/Node/Node.jsx","Algorithms/Dijkstra.js","PathFindingVisualizer/PathfindingVisualizer.jsx","Algorithms/bfs.js","Algorithms/dfs.js","App.js","reportWebVitals.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","startNodeColumn","startNodeRow","finishNodeColumn","finishNodeRow","PathfindingVisualizer","state","mouseIsPressed","getStarterGrid","setState","newGrid","getNewGridWithWallToggled","nodesInShortestPathOrder","i","setTimeout","animateShortestPath","nodeClassName","document","getElementById","getNodesInShortestPathOrder","animate","nextNodesStack","currentNode","nextNode","bfs","pop","dfs","parseInt","value","onClick","visualizeDijkstra","visualizeDFS","visualizebfs","componentDidMount","placeholder","fn1","fn2","fn3","fn4","map","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","slice","newNode","unshift","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e30f6889.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport \"./Node.css\";\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n      ? \"node-finish\"\r\n      : isStart\r\n      ? \"node-start\"\r\n      : isWall\r\n      ? \"node-wall\"\r\n      : \"\";\r\n\r\n    return (\r\n      /*listeners for css*/\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n","export function dijkstra(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    if (closestNode.isWall) continue;\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter((neighbor) => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Node from \"./Node/Node\";\r\nimport { dijkstra } from \"../Algorithms/Dijkstra\";\r\nimport { bfs } from \"../Algorithms/bfs\";\r\nimport { dfs } from \"../Algorithms/dfs\";\r\nimport \"./PathfindingVisualizer.css\";\r\n\r\nvar startNodeColumn = 10;\r\nvar startNodeRow = 10;\r\nvar finishNodeColumn = 35;\r\nvar finishNodeRow = 10;\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n    };\r\n  }\r\n  /* Listener actions*/\r\n  componentDidMount() {\r\n    const grid = getStarterGrid();\r\n    this.setState({ grid });\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({ grid: newGrid, mouseIsPressed: true });\r\n  }\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed) return;\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({ grid: newGrid });\r\n  }\r\n  handleMouseUp() {\r\n    this.setState({ mouseIsPressed: false });\r\n  }\r\n  /*Animates differnet algorithms*/\r\n  animate(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        const nodeClassName = document.getElementById(\r\n          `node-${node.row}-${node.col}`\r\n        ).className;\r\n        if (\r\n          nodeClassName !== \"node node-start\" &&\r\n          nodeClassName !== \"node node-finish\"\r\n        ) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node-visited\";\r\n        }\r\n      }, 10 * i);\r\n    }\r\n  }\r\n  //\r\n  visualizeDijkstra() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[startNodeRow][startNodeColumn];\r\n    const finishNode = grid[finishNodeRow][finishNodeColumn];\r\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n  visualizebfs() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[startNodeRow][startNodeColumn];\r\n    const finishNode = grid[finishNodeRow][finishNodeColumn];\r\n    const visitedNodesInOrder = bfs(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n  visualizeDFS() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[startNodeRow][startNodeColumn];\r\n    const finishNode = grid[finishNodeRow][finishNodeColumn];\r\n    const visitedNodesInOrder = dfs(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n\r\n  /*Constant animation*/\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-shortest-path\";\r\n      }, 50 * i);\r\n    }\r\n  }\r\n  changeloc(){\r\n   startNodeColumn = 15;\r\n   startNodeRow = 17;\r\n   finishNodeColumn = 1;\r\n   finishNodeRow = 15;\r\n   const grid = getStarterGrid();\r\n    this.setState({ grid });\r\n\r\n  }\r\n  fn1() {\r\n    startNodeColumn =parseInt(document.getElementById(\"text1\").value)-1;\r\n    const grid = getStarterGrid();\r\n    this.setState({ grid });\r\n }\r\n fn2(){\r\n     startNodeRow = parseInt(document.getElementById(\"text2\").value)-1;\r\n     const grid = getStarterGrid();\r\n     this.setState({ grid });\r\n  }\r\n  fn3() {\r\n    finishNodeColumn =parseInt(document.getElementById(\"text3\").value)-1;\r\n    const grid = getStarterGrid();\r\n    this.setState({ grid });\r\n }\r\n fn4(){\r\n     finishNodeRow = parseInt(document.getElementById(\"text4\").value)-1;\r\n     const grid = getStarterGrid();\r\n     this.setState({ grid });\r\n  }\r\n  render() {\r\n    const { grid, mouseIsPressed } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <button onClick={() => this.visualizeDijkstra()}>\r\n          Visualize Dijkstra's Algorithm\r\n        </button>\r\n        <button onClick={() => this.visualizeDFS()}>\r\n          Visualize Depth-First Search Algorithm\r\n        </button>\r\n        <button onClick={() => this.visualizebfs()}>\r\n          Visualize Breadth-first Search Algorithm\r\n        </button>\r\n        <button onClick={() => this.componentDidMount()}>clear walls</button>\r\n        <h2>Made by Calvin Power(19242921)</h2>\r\n        <h3>instructions:</h3>\r\n        \r\n        <div3>\r\n          You can place walls by clicking on white tiles, then click on desired\r\n          path finding Algorithm\r\n        </div3><br></br>\r\n        <br></br>\r\n        <div4>\r\n          <input id=\"text1\" placeholder=\"Start node Column\"></input>\r\n          <button onClick={() => this.fn1()}>\r\n          change\r\n        </button>\r\n        <input id=\"text2\" placeholder=\"Start node Row\"></input>\r\n          <button onClick={() => this.fn2()}>\r\n          change\r\n        </button>\r\n        <br></br>\r\n        <input id=\"text3\" placeholder=\"Finish node Column\"></input>\r\n          <button onClick={() => this.fn3()}>\r\n          change\r\n        </button>\r\n        <input id=\"text4\" placeholder=\"Finish node Row\"></input>\r\n          <button onClick={() => this.fn4()}>\r\n          change\r\n        </button>\r\n        <br></br>\r\n        <div5>\r\n          Above you can change both the Start and the Finish nodes\r\n          <br></br>\r\n          Grid is 20 rows by 50 columns\r\n        </div5>\r\n        </div4>\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const { row, col, isFinish, isStart, isWall } = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      col={col}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                      row={row}\r\n                    ></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst getStarterGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < 20; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < 50; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === startNodeRow && col === startNodeColumn,\r\n    isFinish: row === finishNodeRow && col === finishNodeColumn,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nfunction getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","export function bfs(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  let nextNodesStack = [startNode];\r\n  while (nextNodesStack.length) {\r\n    const currentNode = nextNodesStack.shift();\r\n    if (currentNode === finishNode) return visitedNodesInOrder;\r\n\r\n    if (\r\n      !currentNode.isWall &&\r\n      (currentNode.isStart || !currentNode.isVisited)\r\n    ) {\r\n      currentNode.isVisited = true;\r\n      visitedNodesInOrder.push(currentNode);\r\n      const { col, row } = currentNode;\r\n      let nextNode;\r\n      if (row > 0) {\r\n        nextNode = grid[row - 1][col];\r\n        if (!nextNode.isVisited) {\r\n          nextNode.previousNode = currentNode;\r\n          nextNodesStack.push(nextNode);\r\n        }\r\n      }\r\n      if (row < grid.length - 1) {\r\n        nextNode = grid[row + 1][col];\r\n        if (!nextNode.isVisited) {\r\n          nextNode.previousNode = currentNode;\r\n          nextNodesStack.push(nextNode);\r\n        }\r\n      }\r\n      if (col > 0) {\r\n        nextNode = grid[row][col - 1];\r\n        if (!nextNode.isVisited) {\r\n          nextNode.previousNode = currentNode;\r\n          nextNodesStack.push(nextNode);\r\n        }\r\n      }\r\n      if (col < grid[0].length - 1) {\r\n        nextNode = grid[row][col + 1];\r\n        if (!nextNode.isVisited) {\r\n          nextNode.previousNode = currentNode;\r\n          nextNodesStack.push(nextNode);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","export function dfs(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  const nextNodesStack = [];\r\n  nextNodesStack.push(startNode);\r\n  while (nextNodesStack.length) {\r\n    const currentNode = nextNodesStack.pop();\r\n\r\n    if (currentNode === finishNode) {\r\n      return visitedNodesInOrder;\r\n    }\r\n\r\n    if (\r\n      !currentNode.isWall &&\r\n      (currentNode.isStart || !currentNode.isVisited)\r\n    ) {\r\n      currentNode.isVisited = true;\r\n      visitedNodesInOrder.push(currentNode);\r\n\r\n      const { col, row } = currentNode;\r\n      let nextNode;\r\n      if (row > 0) {\r\n        nextNode = grid[row - 1][col];\r\n        if (!nextNode.isVisited) {\r\n          nextNode.previousNode = currentNode;\r\n          nextNodesStack.push(nextNode);\r\n        }\r\n      }\r\n      if (row < grid.length - 1) {\r\n        nextNode = grid[row + 1][col];\r\n        if (!nextNode.isVisited) {\r\n          nextNode.previousNode = currentNode;\r\n          nextNodesStack.push(nextNode);\r\n        }\r\n      }\r\n      if (col > 0) {\r\n        nextNode = grid[row][col - 1];\r\n        if (!nextNode.isVisited) {\r\n          nextNode.previousNode = currentNode;\r\n          nextNodesStack.push(nextNode);\r\n        }\r\n      }\r\n      if (col < grid[0].length - 1) {\r\n        nextNode = grid[row][col + 1];\r\n        if (!nextNode.isVisited) {\r\n          nextNode.previousNode = currentNode;\r\n          nextNodesStack.push(nextNode);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport PathfindingVisualizer from './PathFindingVisualizer/PathfindingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}