{"version":3,"sources":["PathFindingVisualizer/Node/Node.jsx","Algorithms/Dijkstra.js","PathFindingVisualizer/PathfindingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","isVisited","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","PathfindingVisualizer","state","mouseIsPressed","getStarterGrid","setState","newGrid","getNewGridWithWallToggled","nodesInShortestPathOrder","i","setTimeout","animateShortestPath","document","getElementById","currentNode","unshift","getNodesInShortestPathOrder","animateDijkstra","onClick","visualizeDijkstra","componentDidMount","map","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","slice","newNode","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f00185c3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport \"./Node.css\";\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n      isVisited,\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n      ? \"node-finish\"\r\n      : isStart\r\n      ? \"node-start\"\r\n      : isWall\r\n      ? \"node-wall\"\r\n      : \"\";\r\n\r\n    return (\r\n      /*listeners for css*/\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n// by backtracking from the finish node.\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    // If we encounter a wall, we skip it.\r\n    if (closestNode.isWall) continue;\r\n    // If the closest node is at a distance of infinity,\r\n    // we must be trapped and should therefore stop.\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter((neighbor) => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Node from \"./Node/Node\";\r\nimport { dijkstra, getNodesInShortestPathOrder } from \"../Algorithms/Dijkstra\";\r\nimport \"./PathfindingVisualizer.css\";\r\n\r\nconst startNodeColumn = 10;\r\nconst startNodeRow = 10;\r\nconst finishNodeColumn = 35;\r\nconst finishNodeRow = 10;\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n    };\r\n  }\r\n  /* Listener actions*/\r\n  componentDidMount() {\r\n    const grid = getStarterGrid();\r\n    this.setState({ grid });\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({ grid: newGrid, mouseIsPressed: true });\r\n  }\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed) return;\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({ grid: newGrid });\r\n  }\r\n  handleMouseUp() {\r\n    this.setState({ mouseIsPressed: false });\r\n  }\r\n  /*Animates differnet algorithms*/\r\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-visited\";\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  visualizeDijkstra() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[startNodeRow][startNodeColumn];\r\n    const finishNode = grid[finishNodeRow][finishNodeColumn];\r\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n  \r\n    \r\n  \r\n  \r\n  /*Constant animation*/\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-shortest-path\";\r\n      }, 50 * i);\r\n    }\r\n  }\r\n  resetgrid(){\r\n    const grid = getStarterGrid();\r\n    this.setState({ grid });\r\n  }\r\n  render() {\r\n    const { grid, mouseIsPressed } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <button onClick={() => this.visualizeDijkstra()}>\r\n          Visualize Dijkstra's Algorithm\r\n        </button>\r\n        <button onClick={() => this.componentDidMount()}>\r\n          clear walls\r\n        </button>\r\n        <h2>\r\n          Made by Calvin Power(19242921)</h2>\r\n        <h3>\r\n          instructions:\r\n          </h3>\r\n        <div3>\r\n          You can place walls by clicking on white tiles, then click on desired path finding Algorithm\r\n          </div3>\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const { row, col, isFinish, isStart, isWall,} = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      col={col}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                      row={row}\r\n                    ></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst getStarterGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < 20; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < 50; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === startNodeRow && col === startNodeColumn,\r\n    isFinish: row === finishNodeRow && col === finishNodeColumn,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n     ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n","import React from 'react';\nimport './App.css';\nimport PathfindingVisualizer from './PathFindingVisualizer/PathfindingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}